//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputMangager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMangager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMangager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMangager"",
    ""maps"": [
        {
            ""name"": ""MenuP1"",
            ""id"": ""18ba85cf-1837-4a25-96f4-cc28abb5a90c"",
            ""actions"": [
                {
                    ""name"": ""Haut/Bas"",
                    ""type"": ""Button"",
                    ""id"": ""25a2721b-754c-47a0-bb0b-7b5502b60937"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gauche/Droite"",
                    ""type"": ""Button"",
                    ""id"": ""dcfb205e-2ffe-4767-a8a0-f086b94d5921"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Retour"",
                    ""type"": ""Button"",
                    ""id"": ""96aa4d83-e800-4ee0-acd5-b0417ca9e22d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Valider"",
                    ""type"": ""Button"",
                    ""id"": ""21a0de3f-24b0-4113-8b18-2bff2e836daf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fda56842-e062-441e-a16c-823a749a4094"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haut/Bas"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d9fb36d4-f717-4e7b-9a40-866e8797dfbf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haut/Bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d6d2036-78f1-4257-a48a-25be3b5a259f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haut/Bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fe922053-474f-48a9-ae4e-6447f457ab53"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""077b1324-7ddf-469c-bca1-f31b99d2ae1f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e9a44fcf-9aaa-4533-a486-7fef65c65796"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d23bd3d-9b5f-4c9d-9de8-e0fa6d5b2aad"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Retour"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd52e16f-2842-4aeb-ad65-192ac28aac6d"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Valider"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameP1"",
            ""id"": ""8d588e9b-63ec-4c43-8145-4e7991052f0f"",
            ""actions"": [
                {
                    ""name"": ""Gauche/Droite"",
                    ""type"": ""Button"",
                    ""id"": ""2a61b036-33a0-410c-b740-7406cd4c9677"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bas"",
                    ""type"": ""Button"",
                    ""id"": ""fca53b2c-3736-48d2-bd07-22c84d3eeb9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""5b70c206-b940-43cc-a5b2-35a018b31b12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivePowerUp1"",
                    ""type"": ""Button"",
                    ""id"": ""6c71f688-d7c7-42ee-8474-fcbaabbfef2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivePowerUp2"",
                    ""type"": ""Button"",
                    ""id"": ""99416c66-996c-4ff9-82f3-e005a03acebc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f7209016-3ad4-4700-95b2-fb7729e9ea6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""61fe1468-89a7-4a73-970b-98f1121098cd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a723bb7e-98b7-4b1b-bc56-26328d1f0cfc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""59dc9235-83be-4d65-ade6-c1a775d7eee3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""35931c5e-fabe-402f-8543-dd0184ba325d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""34c2728a-09c6-480f-bf2c-e277d87e629c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35ffb4e5-c634-4bb1-9c6f-bdede1a7b6fa"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""59b86702-45a7-4157-b81d-b30a555b99fd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f7f25d19-51a8-4d96-a939-bc8eb68d95b8"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivePowerUp1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aba843b-34a7-46d2-883e-699f68ff208b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivePowerUp2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a2ebae0-f7d6-47fe-82b2-8b2c259686fb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuP2"",
            ""id"": ""1cf2afc4-b5a4-4596-a0bd-dc6121c106ef"",
            ""actions"": [
                {
                    ""name"": ""Haut/Bas"",
                    ""type"": ""Button"",
                    ""id"": ""dda2311d-e629-469d-81a1-6fb624e207ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gauche/Droite"",
                    ""type"": ""Button"",
                    ""id"": ""17c3fce5-0d4e-4f12-a749-c64b350e103e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Retour"",
                    ""type"": ""Button"",
                    ""id"": ""cdd75e26-fa4f-44b5-adc3-a5db51ef6665"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Valider"",
                    ""type"": ""Button"",
                    ""id"": ""10201489-976a-4b33-92b6-36815ffba546"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5aa6cfe1-dad8-40a4-b228-7b8cb3f84248"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haut/Bas"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""67713b0e-f26b-4e47-b13d-c5f7649a864b"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haut/Bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""21d4f028-4458-4e7d-82f8-ba94779b145f"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haut/Bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""047b7e46-ec0e-4cc2-bd5f-777898c2db01"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""59698b17-fbc4-47fd-80ca-e26285ae389c"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f72ec023-f3ba-425e-8ba1-7b6a7e6327a0"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c65c06b7-0c23-4d20-bd42-d0c9e8ebbcda"",
                    ""path"": ""<HID::usb gamepad           >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Retour"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a962495-f79c-4878-8bfd-2a53572bebf5"",
                    ""path"": ""<HID::usb gamepad           >/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Valider"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameP2"",
            ""id"": ""8fbaad86-b6e9-4dc6-ace9-644b91c552cc"",
            ""actions"": [
                {
                    ""name"": ""Gauche/Droite"",
                    ""type"": ""Button"",
                    ""id"": ""db2529d0-3d57-4e4d-97b1-22ce21fcefa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bas"",
                    ""type"": ""Button"",
                    ""id"": ""a8d8ef15-9829-4197-87a5-42a7d3ad3ca9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""4441b73d-e848-4f75-bec9-79ed2cfa73ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivePowerUp1"",
                    ""type"": ""Button"",
                    ""id"": ""5932b0cb-e647-40d4-b06b-e8abf02e4c96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivePowerUp2"",
                    ""type"": ""Button"",
                    ""id"": ""10afde0e-41f9-4b61-8a45-586136e26b2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e4c0f63e-a742-4a46-b93f-6b4336147a40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""00f91fbb-69c9-4ccb-a53a-8c3e9cdf9861"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e888dc6e-8637-4497-b1e0-2c39578dffd6"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0f880ef6-862b-4f59-b5f1-b3a6863caf83"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gauche/Droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aaf5e2d6-4946-4a09-95af-9109b22963b6"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""be64b6cf-0883-4dc4-9419-0b8a7858ef1e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c668f66b-cdd0-454a-acd9-f92b0dcf1056"",
                    ""path"": ""<HID::usb gamepad           >/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ac2fe806-f953-492c-96c9-cccd163d82a5"",
                    ""path"": ""<HID::usb gamepad           >/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ca90fd2c-2257-442b-932b-c9c377650a75"",
                    ""path"": ""<HID::usb gamepad           >/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivePowerUp1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bbaf338-834e-4ca8-9c8d-a938b60f74a3"",
                    ""path"": ""<HID::usb gamepad           >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivePowerUp2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d487a61-eccc-4dcd-99ee-a881fed21aa6"",
                    ""path"": ""<HID::usb gamepad           >/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MenuP1
        m_MenuP1 = asset.FindActionMap("MenuP1", throwIfNotFound: true);
        m_MenuP1_HautBas = m_MenuP1.FindAction("Haut/Bas", throwIfNotFound: true);
        m_MenuP1_GaucheDroite = m_MenuP1.FindAction("Gauche/Droite", throwIfNotFound: true);
        m_MenuP1_Retour = m_MenuP1.FindAction("Retour", throwIfNotFound: true);
        m_MenuP1_Valider = m_MenuP1.FindAction("Valider", throwIfNotFound: true);
        // GameP1
        m_GameP1 = asset.FindActionMap("GameP1", throwIfNotFound: true);
        m_GameP1_GaucheDroite = m_GameP1.FindAction("Gauche/Droite", throwIfNotFound: true);
        m_GameP1_Bas = m_GameP1.FindAction("Bas", throwIfNotFound: true);
        m_GameP1_Rotation = m_GameP1.FindAction("Rotation", throwIfNotFound: true);
        m_GameP1_ActivePowerUp1 = m_GameP1.FindAction("ActivePowerUp1", throwIfNotFound: true);
        m_GameP1_ActivePowerUp2 = m_GameP1.FindAction("ActivePowerUp2", throwIfNotFound: true);
        m_GameP1_Pause = m_GameP1.FindAction("Pause", throwIfNotFound: true);
        // MenuP2
        m_MenuP2 = asset.FindActionMap("MenuP2", throwIfNotFound: true);
        m_MenuP2_HautBas = m_MenuP2.FindAction("Haut/Bas", throwIfNotFound: true);
        m_MenuP2_GaucheDroite = m_MenuP2.FindAction("Gauche/Droite", throwIfNotFound: true);
        m_MenuP2_Retour = m_MenuP2.FindAction("Retour", throwIfNotFound: true);
        m_MenuP2_Valider = m_MenuP2.FindAction("Valider", throwIfNotFound: true);
        // GameP2
        m_GameP2 = asset.FindActionMap("GameP2", throwIfNotFound: true);
        m_GameP2_GaucheDroite = m_GameP2.FindAction("Gauche/Droite", throwIfNotFound: true);
        m_GameP2_Bas = m_GameP2.FindAction("Bas", throwIfNotFound: true);
        m_GameP2_Rotation = m_GameP2.FindAction("Rotation", throwIfNotFound: true);
        m_GameP2_ActivePowerUp1 = m_GameP2.FindAction("ActivePowerUp1", throwIfNotFound: true);
        m_GameP2_ActivePowerUp2 = m_GameP2.FindAction("ActivePowerUp2", throwIfNotFound: true);
        m_GameP2_Pause = m_GameP2.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuP1
    private readonly InputActionMap m_MenuP1;
    private IMenuP1Actions m_MenuP1ActionsCallbackInterface;
    private readonly InputAction m_MenuP1_HautBas;
    private readonly InputAction m_MenuP1_GaucheDroite;
    private readonly InputAction m_MenuP1_Retour;
    private readonly InputAction m_MenuP1_Valider;
    public struct MenuP1Actions
    {
        private @InputMangager m_Wrapper;
        public MenuP1Actions(@InputMangager wrapper) { m_Wrapper = wrapper; }
        public InputAction @HautBas => m_Wrapper.m_MenuP1_HautBas;
        public InputAction @GaucheDroite => m_Wrapper.m_MenuP1_GaucheDroite;
        public InputAction @Retour => m_Wrapper.m_MenuP1_Retour;
        public InputAction @Valider => m_Wrapper.m_MenuP1_Valider;
        public InputActionMap Get() { return m_Wrapper.m_MenuP1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuP1Actions set) { return set.Get(); }
        public void SetCallbacks(IMenuP1Actions instance)
        {
            if (m_Wrapper.m_MenuP1ActionsCallbackInterface != null)
            {
                @HautBas.started -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnHautBas;
                @HautBas.performed -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnHautBas;
                @HautBas.canceled -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnHautBas;
                @GaucheDroite.started -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.performed -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.canceled -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnGaucheDroite;
                @Retour.started -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnRetour;
                @Retour.performed -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnRetour;
                @Retour.canceled -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnRetour;
                @Valider.started -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnValider;
                @Valider.performed -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnValider;
                @Valider.canceled -= m_Wrapper.m_MenuP1ActionsCallbackInterface.OnValider;
            }
            m_Wrapper.m_MenuP1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HautBas.started += instance.OnHautBas;
                @HautBas.performed += instance.OnHautBas;
                @HautBas.canceled += instance.OnHautBas;
                @GaucheDroite.started += instance.OnGaucheDroite;
                @GaucheDroite.performed += instance.OnGaucheDroite;
                @GaucheDroite.canceled += instance.OnGaucheDroite;
                @Retour.started += instance.OnRetour;
                @Retour.performed += instance.OnRetour;
                @Retour.canceled += instance.OnRetour;
                @Valider.started += instance.OnValider;
                @Valider.performed += instance.OnValider;
                @Valider.canceled += instance.OnValider;
            }
        }
    }
    public MenuP1Actions @MenuP1 => new MenuP1Actions(this);

    // GameP1
    private readonly InputActionMap m_GameP1;
    private IGameP1Actions m_GameP1ActionsCallbackInterface;
    private readonly InputAction m_GameP1_GaucheDroite;
    private readonly InputAction m_GameP1_Bas;
    private readonly InputAction m_GameP1_Rotation;
    private readonly InputAction m_GameP1_ActivePowerUp1;
    private readonly InputAction m_GameP1_ActivePowerUp2;
    private readonly InputAction m_GameP1_Pause;
    public struct GameP1Actions
    {
        private @InputMangager m_Wrapper;
        public GameP1Actions(@InputMangager wrapper) { m_Wrapper = wrapper; }
        public InputAction @GaucheDroite => m_Wrapper.m_GameP1_GaucheDroite;
        public InputAction @Bas => m_Wrapper.m_GameP1_Bas;
        public InputAction @Rotation => m_Wrapper.m_GameP1_Rotation;
        public InputAction @ActivePowerUp1 => m_Wrapper.m_GameP1_ActivePowerUp1;
        public InputAction @ActivePowerUp2 => m_Wrapper.m_GameP1_ActivePowerUp2;
        public InputAction @Pause => m_Wrapper.m_GameP1_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GameP1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameP1Actions set) { return set.Get(); }
        public void SetCallbacks(IGameP1Actions instance)
        {
            if (m_Wrapper.m_GameP1ActionsCallbackInterface != null)
            {
                @GaucheDroite.started -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.performed -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.canceled -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnGaucheDroite;
                @Bas.started -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnBas;
                @Bas.performed -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnBas;
                @Bas.canceled -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnBas;
                @Rotation.started -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnRotation;
                @ActivePowerUp1.started -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnActivePowerUp1;
                @ActivePowerUp1.performed -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnActivePowerUp1;
                @ActivePowerUp1.canceled -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnActivePowerUp1;
                @ActivePowerUp2.started -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnActivePowerUp2;
                @ActivePowerUp2.performed -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnActivePowerUp2;
                @ActivePowerUp2.canceled -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnActivePowerUp2;
                @Pause.started -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameP1ActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GameP1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GaucheDroite.started += instance.OnGaucheDroite;
                @GaucheDroite.performed += instance.OnGaucheDroite;
                @GaucheDroite.canceled += instance.OnGaucheDroite;
                @Bas.started += instance.OnBas;
                @Bas.performed += instance.OnBas;
                @Bas.canceled += instance.OnBas;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @ActivePowerUp1.started += instance.OnActivePowerUp1;
                @ActivePowerUp1.performed += instance.OnActivePowerUp1;
                @ActivePowerUp1.canceled += instance.OnActivePowerUp1;
                @ActivePowerUp2.started += instance.OnActivePowerUp2;
                @ActivePowerUp2.performed += instance.OnActivePowerUp2;
                @ActivePowerUp2.canceled += instance.OnActivePowerUp2;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GameP1Actions @GameP1 => new GameP1Actions(this);

    // MenuP2
    private readonly InputActionMap m_MenuP2;
    private IMenuP2Actions m_MenuP2ActionsCallbackInterface;
    private readonly InputAction m_MenuP2_HautBas;
    private readonly InputAction m_MenuP2_GaucheDroite;
    private readonly InputAction m_MenuP2_Retour;
    private readonly InputAction m_MenuP2_Valider;
    public struct MenuP2Actions
    {
        private @InputMangager m_Wrapper;
        public MenuP2Actions(@InputMangager wrapper) { m_Wrapper = wrapper; }
        public InputAction @HautBas => m_Wrapper.m_MenuP2_HautBas;
        public InputAction @GaucheDroite => m_Wrapper.m_MenuP2_GaucheDroite;
        public InputAction @Retour => m_Wrapper.m_MenuP2_Retour;
        public InputAction @Valider => m_Wrapper.m_MenuP2_Valider;
        public InputActionMap Get() { return m_Wrapper.m_MenuP2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuP2Actions set) { return set.Get(); }
        public void SetCallbacks(IMenuP2Actions instance)
        {
            if (m_Wrapper.m_MenuP2ActionsCallbackInterface != null)
            {
                @HautBas.started -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnHautBas;
                @HautBas.performed -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnHautBas;
                @HautBas.canceled -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnHautBas;
                @GaucheDroite.started -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.performed -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.canceled -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnGaucheDroite;
                @Retour.started -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnRetour;
                @Retour.performed -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnRetour;
                @Retour.canceled -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnRetour;
                @Valider.started -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnValider;
                @Valider.performed -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnValider;
                @Valider.canceled -= m_Wrapper.m_MenuP2ActionsCallbackInterface.OnValider;
            }
            m_Wrapper.m_MenuP2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HautBas.started += instance.OnHautBas;
                @HautBas.performed += instance.OnHautBas;
                @HautBas.canceled += instance.OnHautBas;
                @GaucheDroite.started += instance.OnGaucheDroite;
                @GaucheDroite.performed += instance.OnGaucheDroite;
                @GaucheDroite.canceled += instance.OnGaucheDroite;
                @Retour.started += instance.OnRetour;
                @Retour.performed += instance.OnRetour;
                @Retour.canceled += instance.OnRetour;
                @Valider.started += instance.OnValider;
                @Valider.performed += instance.OnValider;
                @Valider.canceled += instance.OnValider;
            }
        }
    }
    public MenuP2Actions @MenuP2 => new MenuP2Actions(this);

    // GameP2
    private readonly InputActionMap m_GameP2;
    private IGameP2Actions m_GameP2ActionsCallbackInterface;
    private readonly InputAction m_GameP2_GaucheDroite;
    private readonly InputAction m_GameP2_Bas;
    private readonly InputAction m_GameP2_Rotation;
    private readonly InputAction m_GameP2_ActivePowerUp1;
    private readonly InputAction m_GameP2_ActivePowerUp2;
    private readonly InputAction m_GameP2_Pause;
    public struct GameP2Actions
    {
        private @InputMangager m_Wrapper;
        public GameP2Actions(@InputMangager wrapper) { m_Wrapper = wrapper; }
        public InputAction @GaucheDroite => m_Wrapper.m_GameP2_GaucheDroite;
        public InputAction @Bas => m_Wrapper.m_GameP2_Bas;
        public InputAction @Rotation => m_Wrapper.m_GameP2_Rotation;
        public InputAction @ActivePowerUp1 => m_Wrapper.m_GameP2_ActivePowerUp1;
        public InputAction @ActivePowerUp2 => m_Wrapper.m_GameP2_ActivePowerUp2;
        public InputAction @Pause => m_Wrapper.m_GameP2_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GameP2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameP2Actions set) { return set.Get(); }
        public void SetCallbacks(IGameP2Actions instance)
        {
            if (m_Wrapper.m_GameP2ActionsCallbackInterface != null)
            {
                @GaucheDroite.started -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.performed -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnGaucheDroite;
                @GaucheDroite.canceled -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnGaucheDroite;
                @Bas.started -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnBas;
                @Bas.performed -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnBas;
                @Bas.canceled -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnBas;
                @Rotation.started -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnRotation;
                @ActivePowerUp1.started -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnActivePowerUp1;
                @ActivePowerUp1.performed -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnActivePowerUp1;
                @ActivePowerUp1.canceled -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnActivePowerUp1;
                @ActivePowerUp2.started -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnActivePowerUp2;
                @ActivePowerUp2.performed -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnActivePowerUp2;
                @ActivePowerUp2.canceled -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnActivePowerUp2;
                @Pause.started -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameP2ActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GameP2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GaucheDroite.started += instance.OnGaucheDroite;
                @GaucheDroite.performed += instance.OnGaucheDroite;
                @GaucheDroite.canceled += instance.OnGaucheDroite;
                @Bas.started += instance.OnBas;
                @Bas.performed += instance.OnBas;
                @Bas.canceled += instance.OnBas;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @ActivePowerUp1.started += instance.OnActivePowerUp1;
                @ActivePowerUp1.performed += instance.OnActivePowerUp1;
                @ActivePowerUp1.canceled += instance.OnActivePowerUp1;
                @ActivePowerUp2.started += instance.OnActivePowerUp2;
                @ActivePowerUp2.performed += instance.OnActivePowerUp2;
                @ActivePowerUp2.canceled += instance.OnActivePowerUp2;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GameP2Actions @GameP2 => new GameP2Actions(this);
    public interface IMenuP1Actions
    {
        void OnHautBas(InputAction.CallbackContext context);
        void OnGaucheDroite(InputAction.CallbackContext context);
        void OnRetour(InputAction.CallbackContext context);
        void OnValider(InputAction.CallbackContext context);
    }
    public interface IGameP1Actions
    {
        void OnGaucheDroite(InputAction.CallbackContext context);
        void OnBas(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnActivePowerUp1(InputAction.CallbackContext context);
        void OnActivePowerUp2(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IMenuP2Actions
    {
        void OnHautBas(InputAction.CallbackContext context);
        void OnGaucheDroite(InputAction.CallbackContext context);
        void OnRetour(InputAction.CallbackContext context);
        void OnValider(InputAction.CallbackContext context);
    }
    public interface IGameP2Actions
    {
        void OnGaucheDroite(InputAction.CallbackContext context);
        void OnBas(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnActivePowerUp1(InputAction.CallbackContext context);
        void OnActivePowerUp2(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
